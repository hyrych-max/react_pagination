{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","perPage","currentPage","onPageChange","isLastPage","Math","ceil","className","classNames","disabled","href","onClick","map","item","active","items","App","useState","setPerPage","setCurrentPage","setTotal","startItem","endItem","generateInfoText","id","defaultValue","onChange","event","parseInt","currentTarget","value","htmlFor","slice","ReactDOM","render","document","getElementById"],"mappings":"yLAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,2BCGIG,EAAwC,SAAC,GAK/C,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAWA,IAAMC,EAAaF,IAAgBG,KAAKC,KAAKN,EAASC,GAEtD,OACE,qBAAIM,UAAU,aAAd,UACE,oBAAIA,UAAWC,IAAW,YACxB,CAAEC,SAA0B,IAAhBP,IADd,SAGE,mBACE,UAAQ,WACRK,UAAU,YACVG,KAAK,QACL,gBAA+B,IAAhBR,EACX,OACA,QACJS,QAvBR,WACE,OAAuB,IAAhBT,GAAqBC,EAAaD,EAAc,IAenD,oBAaDT,EAAW,EAAGY,KAAKC,KAAKN,EAASC,IAC/BW,KAAI,SAAAC,GAAI,OACP,oBAEEN,UAAWC,IAAW,YACpB,CAAEM,OAAQZ,IAAgBW,IAH9B,SAKE,mBACE,UAAQ,WACRN,UAAU,YACVG,KAAI,WAAMR,GACVS,QAAS,kBAAMR,EAAaU,IAJ9B,SAMGA,KAVEA,MAeX,oBAAIN,UAAWC,IAAW,YACxB,CAAEC,SAAUL,IADd,SAGE,mBACE,UAAQ,WACRG,UAAU,YACVG,KAAK,QACL,gBAAeN,EACfO,QAnDR,WACE,OAAOT,IAAgBG,KAAKC,KAAKN,EAASC,IACrCE,EAAaD,EAAc,IA4C5B,wBC3DFa,EAAQtB,EAAW,EAAG,IAAImB,KAAI,SAAAf,GAAC,qBAAYA,MAEpCmB,EAAgB,WAC3B,MAA8BC,mBAAS,GAAvC,mBAAOhB,EAAP,KAAgBiB,EAAhB,KACA,EAAsCD,mBAAS,GAA/C,mBAAOf,EAAP,KAAoBiB,EAApB,KACA,EAA0BF,mBAPV,IAOhB,mBAAOjB,EAAP,KAAcoB,EAAd,KAsBA,OACE,sBAAKb,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,SAbqB,WACvB,IAAMc,EAAYnB,EAAcD,EAAUA,EAAU,EAC9CqB,EAAUpB,IAAgBG,KAAKC,KAAKN,EAAQC,GAC9CD,EACAE,EAAcD,EAElB,MAAM,QAAN,OAAeC,EAAf,mBAAqCmB,EAArC,cAAoDC,EAApD,eAAkEtB,EAAlE,KAQKuB,KAGH,sBAAKhB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRiB,GAAG,kBACHjB,UAAU,eACVkB,aAAc,EACdC,SA9BiB,SAACC,GAC1BT,EAAWU,SAASD,EAAME,cAAcC,MAAO,KAC/CV,EAASpB,GACTmB,EAAe,IAsBT,UAOE,wBAAQW,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOC,QAAQ,kBAAkBxB,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEP,MAAOA,EACPC,QAASA,EACTC,YAAaA,EACbC,aAAcgB,IAGhB,6BAvDKJ,EAAMiB,MAAM9B,EAAcD,EAAUA,EACzCC,EAAcD,GAuDEW,KAAI,SAACC,GAAD,OAChB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YCvEjBoB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.d1229219.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import classNames from 'classnames';\nimport { getNumbers } from '../../utils';\n\ninterface PaginationProps {\n  total: number;\n  perPage: number;\n  currentPage: number;\n  onPageChange: (page: number) => void;\n}\n\nexport const Pagination: React.FC<PaginationProps> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  function onPrevPage() {\n    return currentPage !== 1 && onPageChange(currentPage - 1);\n  }\n\n  function onNextPage() {\n    return currentPage !== Math.ceil(total / (perPage))\n      && onPageChange(currentPage + 1);\n  }\n\n  const isLastPage = currentPage === Math.ceil(total / (perPage));\n\n  return (\n    <ul className=\"pagination\">\n      <li className={classNames('page-item',\n        { disabled: currentPage === 1 })}\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={currentPage === 1\n            ? 'true'\n            : 'false'}\n          onClick={onPrevPage}\n        >\n          «\n        </a>\n      </li>\n\n      {getNumbers(1, Math.ceil(total / (perPage)))\n        .map(item => (\n          <li\n            key={item}\n            className={classNames('page-item',\n              { active: currentPage === item })}\n          >\n            <a\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href={`#${currentPage}`}\n              onClick={() => onPageChange(item)}\n            >\n              {item}\n            </a>\n          </li>\n        ))}\n\n      <li className={classNames('page-item',\n        { disabled: isLastPage })}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={isLastPage}\n          onClick={onNextPage}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\nconst LAST_ITEM = 42;\n\nconst items = getNumbers(1, 42).map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [perPage, setPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [total, setTotal] = useState(LAST_ITEM);\n\n  const itemsPrint = () => {\n    return items.slice(currentPage * perPage - perPage,\n      currentPage * perPage);\n  };\n\n  const selectChangeOfPage = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setPerPage(parseInt(event.currentTarget.value, 10));\n    setTotal(total);\n    setCurrentPage(1);\n  };\n\n  const generateInfoText = () => {\n    const startItem = currentPage * perPage - perPage + 1;\n    const endItem = currentPage === Math.ceil(total / perPage)\n      ? total\n      : currentPage * perPage;\n\n    return `Page ${currentPage} (items ${startItem} - ${endItem} of ${total})`;\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {generateInfoText()}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            defaultValue={5}\n            onChange={selectChangeOfPage}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={total}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={setCurrentPage}\n      />\n\n      <ul>\n        {itemsPrint().map((item) => (\n          <li\n            data-cy=\"item\"\n            key={item}\n          >\n            {item}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}